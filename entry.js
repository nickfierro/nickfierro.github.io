function displayMenu(menuItem, hardwareScreen) {
  //sanity check
  // if (!(MenuItem instanceof MenuItem)) return;
  // if (!(HardwareScreen instanceof HardwareScreen)) return;
  // calls renderText on each entry
  // calls setText on first entry

  // loops through rest of main menu
  for (i = 0; i < menuItem.subMenus.length; i++) {
    var item = menuItem.subMenus[i];
    console.log("displayMenu", item.name);
    // safety check
    if (item > hardwareScreen.rows) break;

    // append menu item
    hardwareScreen.appendText(item.name)
  };
  hardwareScreen.selectLine(1);
  // switch()
};

//enum
var HardwareEnum = {
  Button0 : "Button0",
  Button1 : "Button1",
  Button2 : "Button2",
  Button3 : "Button3",
  Button4 : "Button4",
  Button5 : "Button5",
  Button6 : "Button6",
  Button7 : "Button7",
};


var VirtualEnum = {
  Red : "Red",
  Green : "Green",
  Blue : "Blue",
  Yellow : "Yellow",
  Up : "Up",
  Down : "Down",
  Left : "Left",
  Right : "Right"
};
// screen.displayText("text3")

function mapButtons(){
  for (i = 0; i < hardwareButtons.length; i++){
    hardwareButtons[i].name;
  }
};

var hardwareButtons = [
  new HardwareButton(HardwareEnum.Button0),
  new HardwareButton(HardwareEnum.Button1),
  new HardwareButton(HardwareEnum.Button2),
  new HardwareButton(HardwareEnum.Button3),
  new HardwareButton(HardwareEnum.Button4),
  new HardwareButton(HardwareEnum.Button5),
  new HardwareButton(HardwareEnum.Button6),
  new HardwareButton(HardwareEnum.Button7)
];

var virtualButtons = [
  new VirtualButton(VirtualEnum.Up),
  new VirtualButton(VirtualEnum.Right),
  new VirtualButton(VirtualEnum.Down),
  new VirtualButton(VirtualEnum.Left),
  new VirtualButton(VirtualEnum.Blue),
  new VirtualButton(VirtualEnum.Green),
  new VirtualButton(VirtualEnum.Yellow),
  new VirtualButton(VirtualEnum.Red)
];

// //custom event test
// var hwButtonPress = new Event("hwButtonPress", {"bubbles":true, "cancelable":false});
// console.log('hwButtonPress', hwButtonPress);

var imclicked = function(){
  console.log("i'm clicked!!!!")
};

// add click event to hardware buttons
for(i = 0; i < hardwareButtons.length; i++){
  // document.getElementById(hardwareButtons[i].name).addEventListener("click", imclicked);
  hardwareButtons[i].vbutton = virtualButtons[i];
  document.getElementById(hardwareButtons[i].name).addEventListener('click', function(ev) {
    console.log(ev)
  })
};
//instanciate
var mainMenu = new MenuItem("Main");

var subMenu1 = new MenuItem("Map Buttons");

var subMenu2 = new MenuItem("View Notifications");

var subMenu3 = new MenuItem("Account");

var accountsubMenu = new MenuItem("Get Coinbase");

mainMenu.addSubMenu(subMenu1);
mainMenu.addSubMenu(subMenu2);
mainMenu.addSubMenu(subMenu3);
subMenu3.addSubMenu(accountsubMenu);
console.log('mainMenu', mainMenu);

//instanciate
var display = new HardwareScreen("display", 40, 4);
console.log('display', display);

display.setvirtualInterface('mydisplay');
console.log('interface',  display.interface);

displayMenu(mainMenu, display);

//for console testing only
window.myWeb3Instance = web3;

var source = "" +
"contract test {\n" +
"   function multiply(uint a) constant returns(uint d) {\n" +
"       return a * 7;\n" +
"   }event multiplied(uint d);\n" +
"}\n";
var compiled = web3.eth.compile.solidity(source);
var code = compiled.test.code;
// contract json abi, this is autogenerated using solc CLI
var abi = compiled.test.info.abiDefinition;

console.log('web3', web3);

accountsubMenu.coinbase = function(){
  getCoinbase()
};
